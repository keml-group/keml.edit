/**
 */
package keml.provider;

import java.util.ArrayList;
import java.util.Collection;

import keml.util.KemlAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class KemlItemProviderAdapterFactory extends KemlAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public KemlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link keml.Conversation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConversationItemProvider conversationItemProvider;

	/**
	 * This creates an adapter for a {@link keml.Conversation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConversationAdapter() {
		if (conversationItemProvider == null) {
			conversationItemProvider = new ConversationItemProvider(this);
		}

		return conversationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link keml.ConversationPartner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConversationPartnerItemProvider conversationPartnerItemProvider;

	/**
	 * This creates an adapter for a {@link keml.ConversationPartner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConversationPartnerAdapter() {
		if (conversationPartnerItemProvider == null) {
			conversationPartnerItemProvider = new ConversationPartnerItemProvider(this);
		}

		return conversationPartnerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link keml.Author} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuthorItemProvider authorItemProvider;

	/**
	 * This creates an adapter for a {@link keml.Author}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuthorAdapter() {
		if (authorItemProvider == null) {
			authorItemProvider = new AuthorItemProvider(this);
		}

		return authorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link keml.SendMessage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SendMessageItemProvider sendMessageItemProvider;

	/**
	 * This creates an adapter for a {@link keml.SendMessage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSendMessageAdapter() {
		if (sendMessageItemProvider == null) {
			sendMessageItemProvider = new SendMessageItemProvider(this);
		}

		return sendMessageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link keml.ReceiveMessage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReceiveMessageItemProvider receiveMessageItemProvider;

	/**
	 * This creates an adapter for a {@link keml.ReceiveMessage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReceiveMessageAdapter() {
		if (receiveMessageItemProvider == null) {
			receiveMessageItemProvider = new ReceiveMessageItemProvider(this);
		}

		return receiveMessageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link keml.NewInformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NewInformationItemProvider newInformationItemProvider;

	/**
	 * This creates an adapter for a {@link keml.NewInformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNewInformationAdapter() {
		if (newInformationItemProvider == null) {
			newInformationItemProvider = new NewInformationItemProvider(this);
		}

		return newInformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link keml.PreKnowledge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreKnowledgeItemProvider preKnowledgeItemProvider;

	/**
	 * This creates an adapter for a {@link keml.PreKnowledge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreKnowledgeAdapter() {
		if (preKnowledgeItemProvider == null) {
			preKnowledgeItemProvider = new PreKnowledgeItemProvider(this);
		}

		return preKnowledgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link keml.InformationLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InformationLinkItemProvider informationLinkItemProvider;

	/**
	 * This creates an adapter for a {@link keml.InformationLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInformationLinkAdapter() {
		if (informationLinkItemProvider == null) {
			informationLinkItemProvider = new InformationLinkItemProvider(this);
		}

		return informationLinkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (conversationItemProvider != null)
			conversationItemProvider.dispose();
		if (conversationPartnerItemProvider != null)
			conversationPartnerItemProvider.dispose();
		if (authorItemProvider != null)
			authorItemProvider.dispose();
		if (sendMessageItemProvider != null)
			sendMessageItemProvider.dispose();
		if (receiveMessageItemProvider != null)
			receiveMessageItemProvider.dispose();
		if (newInformationItemProvider != null)
			newInformationItemProvider.dispose();
		if (preKnowledgeItemProvider != null)
			preKnowledgeItemProvider.dispose();
		if (informationLinkItemProvider != null)
			informationLinkItemProvider.dispose();
	}

}
